#!/bin/sh

set -e

function set_warp_directory() {
  local real_warp_path="$(realpath "$0")"
  WARP_DIRECTORY="$(dirname "$real_warp_path")"
}

function declare_container_provider() {
  CONTAINER_PROVIDER=
}

warmup() {
  set_warp_directory
  declare_container_provider
}

warmup

set +e

function is_key_equals_value_argument() {
  printf -- "$1" | grep -Eq '^[^=]+=.+$'
}

function try_setup_container_provider() {
  if [ "$1" = '--container-provider' ]; then
    CONTAINER_PROVIDER="$2"
  fi
}

function key_of() {
  echo "$1" | sed -E 's/^([^=]+)=.+$/\1/'
}

function value_of() {
  echo "$1" | sed -E 's/^[^=]+=(.+)$/\1/'
}

function parse_key_value_arguments() {
  local arg1=
  local arg2=

  local arg=
  for arg in $@; do
    if is_key_equals_value_argument "$arg" && [ -z "$arg1" ]; then
      try_setup_container_provider "$(key_of "$arg")" "$(value_of "$arg")"
    else
      [ -z "$arg1" ] && arg1="$arg" && continue
      arg2="$arg"
      try_setup_container_provider "$arg1" "$arg2"
      arg1=
      arg2=
    fi
  done
}

function look_for_container_provider_in_arguments() {
  if [ $# -eq 0 ]; then
    return 0
  fi

  parse_key_value_arguments "$@"
}

function source_config_file() {
  if [ ! -f "$WARP_DIRECTORY/warp.config" ]; then
    printf $'%s %s\n%s %s\n%s %s\n' \
      'Unable to find configuration file needed to set the default container' \
      'provider.' \
      'Missing file is' \
      "$WARP_DIRECTORY/warp.config" \
      'Alternatively, you can specify --container-provider=... on warp' \
      'invocation.'

    return 1
  fi

  . "$WARP_DIRECTORY/warp.config" \
    && eval "$GLOBAL_CONFIG" \
    && CONTAINER_PROVIDER="$DEFAULT_CONTAINER_PROVIDER"
}

function get_default_container_provider_if_needed() {
  if [ ! -z "$CONTAINER_PROVIDER" ]; then
    return 0
  fi

  source_config_file
}

function check_container_provider_directory() {
  local container_provider_directory=\
"$WARP_DIRECTORY/warp-shell/$CONTAINER_PROVIDER"

  if [ ! -d "$container_provider_directory" ]; then
    printf $'%s %s %s %s\n' \
      'Unabled to use the' \
      "$CONTAINER_PROVIDER" \
      'provider. There is not any directory with the provider name in' \
      "$WARP_DIRECTORY/warp-shell"' directory.'

    return 1
  fi
}

function check_container_provider_plugin() {
  local container_provider_functions=\
"$WARP_DIRECTORY/warp-shell/$CONTAINER_PROVIDER/provider.functions"

  if [ ! -f "$container_provider_functions" ]; then
    printf $'%s %s %s %s %s %s\n' \
      'unabled to locate the' \
      "$container_provider_functions" \
      'file. This file is necessary and exposes the needed interface to deal' \
      'with the' "$CONTAINER_PROVIDER" 'provider that has been specified'

    return 1
  fi
}

function run_warp_shell() {
  :
}

function run() {
  look_for_container_provider_in_arguments "$@" \
    && get_default_container_provider_if_needed \
    && run_warp_shell "$@"
}

run "$@"
