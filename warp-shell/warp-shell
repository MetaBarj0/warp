#!/bin/sh

set -e

function setup_directories() {
  WARP_SHELL_DIRECTORY="$(dirname "$0")"
  BOOTSTRAP_DIRECTORY="$WARP_SHELL_DIRECTORY/bootstrap"
  CONTAINER_PROVIDER_DIRECTORY="$BOOTSTRAP_DIRECTORY/$CONTAINER_PROVIDER"
}

function declare_bootstrap_variables() {
  BOOTSTRAP_COMMAND_DETECTED=1
  BOOTSTRAP_SUBCOMMAND=
}

function warmup() {
  setup_directories \
    && declare_bootstrap_variables
}

warmup

set +e

function is_bootstrap_command_detected_once() {
  if [ "$1" = 'bootstrap' ] && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 1 ]; then
    return 0
  fi

  return 1
}

function is_bootstrap_help_subcommand_detected_once() {
  if [ "$1" = 'help' ] \
      && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
      && [ -z "$BOOTSTRAP_SUBCOMMAND" ]; then
    return 0
  fi

  return 1
}

function is_bootstrap_run_subcommand_detected_once() {
  if [ "$1" = 'run' ] \
      && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
      && [ -z "$BOOTSTRAP_SUBCOMMAND" ]; then
    return 0
  fi

  return 1
}

function is_bootstrap_clean_subcommand_detected_once() {
  if [ "$1" = 'clean' ] \
      && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
      && [ -z "$BOOTSTRAP_SUBCOMMAND" ]; then
    return 0
  fi

  return 1
}

function try_process_bootstrap_argument() {
  if is_bootstrap_command_detected_once "$1"; then
    BOOTSTRAP_COMMAND_DETECTED=0
  elif is_bootstrap_help_subcommand_detected_once "$1"; then
    BOOTSTRAP_SUBCOMMAND='help'
  elif is_bootstrap_run_subcommand_detected_once "$1"; then
    BOOTSTRAP_SUBCOMMAND='run'
  elif is_bootstrap_clean_subcommand_detected_once "$1"; then
    BOOTSTRAP_SUBCOMMAND='clean'
  else
    return 1
  fi
}

function is_bootstrap_command_set() {
  [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
    && [ ! -z "$BOOTSTRAP_SUBCOMMAND" ]
}

function parse_input_arguments() {
  local arg=
  for arg in $@; do
    try_process_bootstrap_argument "$arg" \
      || echo "info : ignoring $arg"
  done
}

function is_bootstrap_command_provided() {
  parse_input_arguments "$@" \
    && is_bootstrap_command_set
}

function print_bootstrap_help() {
  echo bootstrap help
}

function do_bootstrap_run() {
  :
}

function do_bootstrap_clean() {
  :
}

function dispatch_bootstrap_command() {
  if [ "$BOOTSTRAP_SUBCOMMAND" = 'help' ]; then
    print_bootstrap_help
  elif [ "$BOOTSTRAP_SUBCOMMAND" = 'run' ]; then
    do_bootstrap_run
  elif [ "$BOOTSTRAP_SUBCOMMAND" = 'clean' ]; then
    do_bootstrap_clean
  fi
}

function check_container_provider_functions_file_exists() {
  local file="$CONTAINER_PROVIDER_DIRECTORY/provider.functions"

  if [ ! -f "$file" ]; then
    printf $'Error : %s %s %s\n%s %s\n' \
      'Cannot load the' "$file" 'file as it does not exist.' \
      'This file is mandatory and must expose functions to deal with the' \
      'container technology you chose as container provider.'

    exit 1
  fi
}

function lookup_function() {
  local function_name="$1"

  local lookup_result_stdout="$(
    type "$function_name" 2>/dev/null \
    | head -n 1 \
    | grep -Ex "$function_name"' is a function')"

  if [ -z "$lookup_result_stdout" ]; then
    printf $'Error : %s %s %s %s\n' \
      'Cannot find the' "$function_name" 'in the file' \
      "$CONTAINER_PROVIDER_DIRECTORY/provider.functions"

    exit 1
  fi
}

function check_container_provider_functions() {
  lookup_function 'container_provider_check_host_system' \
    && lookup_function 'container_provider_image_exists'
}

function load_container_provider_functions() {
  check_container_provider_functions_file_exists \
    && . "$CONTAINER_PROVIDER_DIRECTORY/provider.functions" \
    && check_container_provider_functions
}

function do_bootstrap() {
  load_container_provider_functions \
    && dispatch_bootstrap_command
}

function try_process_bootstrap_command() {
  is_bootstrap_command_provided "$@" \
    && do_bootstrap
}

function check_system_bootstrap_status() {
  :
}

function exec_warp_native() {
  :
}

function forward_command_to_warp_native() {
  load_container_provider_functions \
    && check_system_bootstrap_status \
    && exec_warp_native "$@"
}

function main() {
  try_process_bootstrap_command "$@" \
  || forward_command_to_warp_native "$@"
}

main "$@"
