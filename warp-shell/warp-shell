#!/bin/sh

set -e

function setup_directories() {
  WARP_SHELL_DIRECTORY="$(dirname "$0")"
  BOOTSTRAP_DIRECTORY="$WARP_SHELL_DIRECTORY/bootstrap"
  CONTAINER_PROVIDER_DIRECTORY="$BOOTSTRAP_DIRECTORY/$CONTAINER_PROVIDER"
}

function declare_bootstrap_variables() {
  BOOTSTRAP_COMMAND_DETECTED=1
  BOOTSTRAP_SUBCOMMAND=
}

function warmup() {
  setup_directories \
    && declare_bootstrap_variables
}

warmup

set +e

function is_bootstrap_command_detected_once() {
  if [ "$1" = 'bootstrap' ] && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 1 ]; then
    return 0
  fi

  return 1
}

function is_bootstrap_help_subcommand_detected_once() {
  if [ "$1" = 'help' ] \
      && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
      && [ -z "$BOOTSTRAP_SUBCOMMAND" ]; then
    return 0
  fi

  return 1
}

function is_bootstrap_run_subcommand_detected_once() {
  if [ "$1" = 'run' ] \
      && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
      && [ -z "$BOOTSTRAP_SUBCOMMAND" ]; then
    return 0
  fi

  return 1
}

function is_bootstrap_clean_subcommand_detected_once() {
  if [ "$1" = 'clean' ] \
      && [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
      && [ -z "$BOOTSTRAP_SUBCOMMAND" ]; then
    return 0
  fi

  return 1
}

function try_process_bootstrap_argument() {
  if is_bootstrap_command_detected_once "$1"; then
    BOOTSTRAP_COMMAND_DETECTED=0
  elif is_bootstrap_help_subcommand_detected_once "$1"; then
    BOOTSTRAP_SUBCOMMAND='help'
  elif is_bootstrap_run_subcommand_detected_once "$1"; then
    BOOTSTRAP_SUBCOMMAND='run'
  elif is_bootstrap_clean_subcommand_detected_once "$1"; then
    BOOTSTRAP_SUBCOMMAND='clean'
  else
    return 1
  fi
}

function is_bootstrap_command_set() {
  [ "$BOOTSTRAP_COMMAND_DETECTED" -eq 0 ] \
    && [ ! -z "$BOOTSTRAP_SUBCOMMAND" ]
}

function parse_input_arguments() {
  local arg=
  for arg in $@; do
    try_process_bootstrap_argument "$arg" \
      || echo "info : ignoring $arg"
  done
}

function is_bootstrap_command_provided() {
  parse_input_arguments "$@" \
    && is_bootstrap_command_set
}

function print_bootstrap_help() {
  cat << EOF
SUMMARY :

\`warp bootstrap\` command is designed to prepare the host machine to benefit
the full functionnalities set of warp.
Bootstrapping consists in creating the necessary base on the host machine to
use other than \`bootstrap ...\` warp command.

DETAILS:

There are 3 different bootstrap commands :
- bootstrap help : display this help message
- bootstrap run : run the bootstrap process. Once done, the host system will
  be able to fully use the full command set of \`warp\`.
- bootstrap clean : clean everything the \`bootstrap run\` command has done.
  Once this command has been executed, the host machine won't be able to run
  any \`warp\` other than bootstrap commands.

Regarding the container provider specified either in the configuration file or
in the command line with \`--container-provider=...\`, the bootstrap process
will create few container images :
- one able to build warp-native. warp-native is a binary executable program
  designed to be run in a container and execute all \`warp\` commands one could
  require.
- few ancillary images able to support the execution of all but bootstrap
  commands executed by warp-native.
The content and the role of each image depends of the container provider
specified.

The \`docker\` provider is shipped with warp, by default. However, you can
write your very own provider. All you need to do is :
- create a sub directory under \`warp-shell/bootstrap\` having the name of the
  provider you want to create
- creating a provider.functions file exposing shell functions describing the
  interface to interact with your provider. Names of these functions are
  important. You can get inspired by the shipped \`null\` provider that does
  nothing but exposing necessary functions.

EXAMPLES :

\`warp bootstrap help\` : displays bootstrap help message
\`warp bootstrap run\` : bootstraps the host system
\`warp bootstrap clean\` : cleans the host machine removing all modifications
done by the \`warp bootstrap run\` command execution
EOF
}

function bootstrap_create_builder_image_if_not_exists() {
  if ! container_provider_builder_image_exists; then
    container_provider_create_builder_image
  else
    echo bootstrap builder image exists, nothing to do
  fi 
}

function do_bootstrap_run() {
  bootstrap_create_builder_image_if_not_exists \
    && container_provider_create_ancillary_images
}

function do_bootstrap_clean() {
  :
}

function dispatch_bootstrap_command() {
  if [ "$BOOTSTRAP_SUBCOMMAND" = 'help' ]; then
    print_bootstrap_help
  elif [ "$BOOTSTRAP_SUBCOMMAND" = 'run' ]; then
    do_bootstrap_run
  elif [ "$BOOTSTRAP_SUBCOMMAND" = 'clean' ]; then
    do_bootstrap_clean
  fi
}

function check_container_provider_functions_file_exists() {
  local file="$CONTAINER_PROVIDER_DIRECTORY/provider.functions"

  if [ ! -f "$file" ]; then
    printf $'Error : %s %s %s\n%s %s\n' \
      'Cannot load the' "$file" 'file as it does not exist.' \
      'This file is mandatory and must expose functions to deal with the' \
      'container technology you chose as container provider.'

    exit 1
  fi
}

function lookup_function() {
  local function_name="$1"

  local lookup_result_stdout="$(
    type "$function_name" 2>/dev/null \
    | head -n 1 \
    | grep -Ex "$function_name"' is a function')"

  if [ -z "$lookup_result_stdout" ]; then
    printf $'Error : %s %s %s %s\n' \
      'Cannot find the' "$function_name" 'in the file' \
      "$CONTAINER_PROVIDER_DIRECTORY/provider.functions"

    exit 1
  fi
}

function check_container_provider_functions() {
  lookup_function 'container_provider_check_bootstrap_status_on_host_system' \
    && lookup_function 'container_provider_builder_image_exists' \
    && lookup_function 'container_provider_create_builder_image' \
    && lookup_function 'container_provider_create_ancillary_images'
}

function load_container_provider_functions() {
  check_container_provider_functions_file_exists \
    && . "$CONTAINER_PROVIDER_DIRECTORY/provider.functions" \
    && check_container_provider_functions
}

function do_bootstrap() {
  load_container_provider_functions \
    && dispatch_bootstrap_command
}

function try_process_bootstrap_command() {
  is_bootstrap_command_provided "$@" \
    && do_bootstrap
}

function check_system_bootstrap_status() {
  :
}

function exec_warp_native() {
  :
}

function forward_command_to_warp_native() {
  load_container_provider_functions \
    && check_system_bootstrap_status \
    && exec_warp_native "$@"
}

function main() {
  try_process_bootstrap_command "$@" \
  || forward_command_to_warp_native "$@"
}

main "$@"
